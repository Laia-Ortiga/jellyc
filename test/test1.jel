module main

const X = `Affine[i32]
const my_type = `ArrayLength[3]
const my_type2 = [my_type -> i32]
const THREE = 3

extern mut wwww i32

struct W {
    a X,
    b f64,
}

#macro add_one(x i32) -> i32 {
#    x + 1
#}

enum TokenTag i8 {
    sentinel,
    ignored,
    invalid,
}

function add_one(x i32) -> i32 {
    x + 1
}

function f2(hi TokenTag) {
    let array = f3()
    let slice = &array[2:3]
    let length = slice.length
    take_slice(&array)
}

function f3() -> [:3]i32 {
    [2 >> 1.3 as i32, 4, 5]
}

function f(hi X) {
    let x = TokenTag.sentinel
    let y = TokenTag.ignored

    if 3 == 4 and 1 == 2 {
        f2(.invalid)
    }
}

function take_slice(x @i32) {

}

function main() {
    const FOUR = 4
    let q = [THREE, FOUR, 6]
    mut a = W(X(19), 340.01)
    let p = a.b
    let xx = a
    let b = X(3)
    X(3)
    let in = switch 3 {
        1 -> false,
        2 -> false,
        else -> true,
    }

    while true {
        let c = X(3)
        f(c)
    }
}
